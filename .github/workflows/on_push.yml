name: test and push docker image
on: [push]
env:
  # NOTE keep versions in sync with version in TOSCA templates
  TERRAFORM_VERSION: 1.1.4 # see tosca_plugins/artifacts.yaml
  HELM_VERSION: 3.7.1 # see configurators/helm-template.yaml
  GCLOUD_VERSION: 368.0.0 # see tosca_plugins/artifacts.yaml
  KUBECTL_VERSION: v1.21.2
  K3D_VERSION: v4.4.6
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.7, 3.8, 3.9, "3.10"]
    env:
      TOX_SKIP_ENV: .+(docker|lock)
      UNFURL_LOGGING: info
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false
      - name: Setup helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.HELM_VERSION }}
      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: ${{ env.KUBECTL_VERSION }}
      - name: Setup k3d
        run: |
          wget https://github.com/rancher/k3d/releases/download/"${{ env.K3D_VERSION }}"/k3d-linux-amd64
          chmod +x k3d-linux-amd64
          sudo mv k3d-linux-amd64 /usr/local/bin/k3d
      - name: Set up the cluster
        run: |
          k3d cluster create
          kubectl get node
          k3d kubeconfig merge --all -d
          kubectl config view
      - name: Install Tox and any other packages
        run: pip install tox
      - name: Run Tox
        # Run tox using the version of Python in `PATH`
        run: |
          export PY_V=py3`python -c "import sys; print(sys.version_info.minor, end='')"`
          tox -c tosca-parser/tox.ini -e $PY_V
          tox -e $PY_V -- -n auto --dist loadfile
      - name: build docs
        if: matrix.python == 3.9
        run: tox -e docs -- -W
      - name: upload docs
        if: matrix.python == 3.9
        uses: actions/upload-artifact@v1
        with:
          name: DocumentationHTML
          path: .tox/docs/html/
  deploy_dockerhub:
    needs: test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: "ocbuilds"
    # Map a step output to a job output
    outputs:
      release: ${{ steps.get_tag_name.outputs.release }}
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKER_HUB }}
      - name: fetch repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Get the tag name or abbreviated commit digest
        id: get_tag_name
        run: |
          label=$(git describe --contains --always)
          echo "::set-output name=tag::"${label%^0}
          if [[ $label =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,4}.0$ ]]; then
              echo ::set-output name=release::true
          fi
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            onecommons/unfurl
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=raw,value=stable,enable=${{ steps.get_tag_name.outputs.release || 'false' }}
            type=raw,value=${{ steps.get_tag_name.outputs.tag }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./docker/Dockerfile
          push: true
          build-args: |
            HELM_VERSION=${{ env.HELM_VERSION }}
            TERRAFORM_VERSION=${{ env.TERRAFORM_VERSION }}
            GCLOUD_VERSION=${{ env.GCLOUD_VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
  publish:
    needs: deploy_dockerhub
    if: needs.deploy_dockerhub.outputs.release
    runs-on: ubuntu-latest
    steps:
      - name: fetch repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: build python package
        run: python setup.py sdist bdist_wheel
      - name: release to pypi
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI }}
          verbose: true
  docs:
    needs: deploy_dockerhub
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/publish-docs'
    runs-on: ubuntu-latest
    steps:
      - name: Download documentation
        uses: actions/download-artifact@v2
        with:
          name: DocumentationHTML
          path: build
      - name: Commit documentation changes
        run: |
          git clone ${{github.server_url}}/${{github.repository}} --branch gh-pages --single-branch gh-pages
          cp -r build/* gh-pages/
          cd gh-pages
          touch .nojekyll
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update documentation" -a || true
          # The above command will fail if no changes were present, so we ignore
          # that.
      - name: Push docs to gh-pages branch
        uses: ad-m/github-push-action@master
        with:
          branch: gh-pages
          directory: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
