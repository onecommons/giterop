# Generated by tosca.yaml2python from docs/examples/service-template.yaml at 2024-07-26T13:42:20 overwrite not modified (change to "overwrite ok" to allow)
"""An illustrative TOSCA service template"""

import unfurl
from typing import Sequence, Union
import tosca
from tosca import Attribute, Eval, GB, MB, Property, TopologyInputs, TopologyOutputs
import unfurl.configurators.shell
from unfurl.tosca_plugins.expr import concat


class Inputs(TopologyInputs):
    domain: str


class dbconnection(tosca.relationships.ConnectsTo):
    username: str
    password: str = Property(metadata={"sensitive": True})


class myApplication(tosca.nodes.SoftwareComponent):
    domain: str = Inputs.domain

    private_address: str = Attribute()

    host: Sequence[
        Union[
            tosca.relationships.HostedOn,
            tosca.nodes.Compute,
            tosca.capabilities.Compute,
        ]
    ] = ()
    db: "dbconnection"

    def create(self, **kw):
        return unfurl.configurators.shell.ShellConfigurator(
            command=["create.sh"],
        )

    def configure(self, **kw):
        return unfurl.configurators.shell.ShellConfigurator(
            command=["configure.sh"],
        )

    def delete(self, **kw):
        return unfurl.configurators.shell.ShellConfigurator(
            command=["delete.sh"],
        )


compute = tosca.nodes.Compute(
    "compute",
    host=tosca.capabilities.Compute(
        num_cpus=1,
        disk_size=200 * GB,
        mem_size=512 * MB,
    ),
)

mydb = tosca.nodes.Database(
    "mydb",
    name="mydb",
    host=[compute],
)

mydb_connection = dbconnection(
    "mydb_connection",
    username="myapp",
    password=Eval({"eval": {"secret": "myapp_db_pw"}}),
)
myApp = myApplication(
    "myApp",
    host=[compute],
    db=mydb_connection[mydb],
)
myApp.image = tosca.artifacts.DeploymentImageContainerDocker(
    "image",
    file="myapp:latest",
    repository="docker_hub",
)


class Outputs(TopologyOutputs):
    url: str = concat("https://", Inputs.domain)
