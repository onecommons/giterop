apiVersion: unfurl/v1alpha1
kind: Ensemble
spec:
  service_template:
    imports:
      - repository: unfurl
        file: tosca_plugins/k8s.yaml

    # unfurl.relationships.InstalledBy used for implementation if no implementation is specified
    node_types:
      unfurl.nodes.HelmRelease:
        derived_from: unfurl.nodes.Installation
        requirements:
          - host:
              node: unfurl.nodes.K8sNamespace
              relationship: tosca.relationships.HostedOn
        properties:
          chart:
            type: string
          release_name:
            type: string
        interfaces:
          Standard:
            delete: DummyShell
          Install:
            type: unfurl.interfaces.install.Helm
            inputs:
              chart: { get_property: ["SELF", "chart"] }
              release_name: { get_property: ["SELF", "release_name"] }
            operations:
              subtaskOperation:
                implementation:
                  primary: DummyShell
              execute:
                implementation: Helm
                inputs:
                  helmcmd: install
                  command:
                    eval: # helm install stable/mysql --generate-name
                      template: >
                        helm {{inputs.helmcmd}} {{inputs.release_name}} {{inputs.chart}}
                          --namespace {{"namespace" | ref}}
                          {%if HOST.kubecontext is defined %} --kubecontext {{HOST.kubecontext}} {%endif%}
                          {%if task.dryrun%}--dry-run{%endif%}
                          --values {{ valuesfile }}
                          {%if task.verbose %}--debug{%endif%}
                          {%if task.timeout %}--timeout {{task.timeout}}{%endif%}
                          {%if inputs.flags %}
                            {%for flag, value in inputs.flags.items() %}
                              --{{flag}} "{{value | quote }}"
                            {%endfor%}
                          {%endif%}
                    vars:
                      valuesfile:
                        eval:
                          tempfile: $inputs::values
              discover:
                implementation: Shell
                inputs:
                  # command: helm status -o json {{inputs.release_name}}
                  command: cat helm-release.json
                  cwd:
                    eval:
                      get_dir: src
                  resultTemplate: |
                    {% set json = stdout | from_json %}
                    {%for doc in json.manifest | from_yaml_all %}
                      {%if doc.kind is defined %}
                      - name: {{doc.kind}}-{{doc.metadata.namespace }}-{{ doc.metadata.name }}
                        {%if doc.metadata.namespace is not defined %}
                        parent: HOST
                        {% endif %}
                        template:
                          {%if doc.kind == 'Secret' %}
                          type: unfurl.nodes.K8sSecretResource
                          {% else %}
                          type: unfurl.nodes.K8sResource
                          {% endif %}{%if doc.metadata.namespace is defined %}
                          requirements:
                            - host:
                                node: {{ "::*::[.template::type=unfurl.nodes.K8sNamespace][name=$namespace]::.template::name" | eval(namespace=doc.metadata.namespace) }}
                          {%endif%}
                        attributes:
                          {%if doc.metadata.namespace is defined %}
                          namespace: {{doc.metadata.namespace }}
                          {% endif %}
                          apiResource:
                    {{ doc | to_yaml | indent(10, true) }}
                        readyState: {%if json.info.deleted %}absent{% else %}ok{%endif%}
                      {%endif%}
                    {% endfor %}
                      - name: SELF
                        readyState: ok

    interface_types:
      unfurl.interfaces.install.Helm:
        derived_from: unfurl.interfaces.Install
        inputs:
          chart:
            type: string
          release_name:
            type: string
          flags:
            type: map
            required: false
        operations:
          subtaskOperation:
          execute:

    topology_template:
      workflows:
        deploy:
          steps:
            helm:
              target: unfurl.nodes.HelmRelease
              activities:
                - call_operation:
                    operation: unfurl.interfaces.install.Helm.execute
                    inputs:
                      # XXX helmcmd: '{{ "update" if target.exists else "install"}}'
                      helmcmd: install
                - inline: check
        undeploy:
          steps:
            helm:
              target: unfurl.nodes.HelmRelease
              activities:
                - delegate: undeploy
        check:
          steps:
            helm:
              target: unfurl.nodes.HelmRelease
              activities:
                - call_operation: unfurl.interfaces.install.Helm.discover
                - set_state: managed

      node_templates:
        gitlab-release:
          type: unfurl.nodes.HelmRelease
          requirements:
            - host: defaultNamespace
          properties:
            chart: gitlab/gitlab
            release_name: foo
          interfaces:
            Install:
              inputs:
                flags:
                  repo: https://charts.gitlab.io/
                values:
                  certmanager-issuer.email: admin@onecommons.org
                  global:
                    hosts:
                      domain:
                        eval: ::homedomain

        stagingCluster:
          type: unfurl.nodes.K8sCluster
          directives:
            - discover

        defaultNamespace:
          type: unfurl.nodes.K8sNamespace
          directives: # assume "default" namespace already exists
            - discover
          requirements:
            - host: stagingCluster
          properties:
            name: default
