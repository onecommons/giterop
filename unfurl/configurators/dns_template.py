# Generated by tosca.yaml2python from ../../unfurl/unfurl/configurators/dns-template.yaml at 2023-10-06T06:55:28 overwrite not modified (change to "ok" to allow)

import unfurl
from typing import List, Dict, Any, Tuple, Union, Sequence
from typing_extensions import Annotated
from tosca import (
    ArtifactType,
    Attribute,
    B,
    BPS,
    B_Scalar,
    Bitrate,
    Capability,
    CapabilityType,
    D,
    DataType,
    Eval,
    Frequency,
    GB,
    GBPS,
    GB_Scalar,
    GHZ,
    GHz,
    GHz_Scalar,
    GIB,
    GIBPS,
    Gbps,
    Gbps_Scalar,
    GiB,
    GiB_Scalar,
    Gibps,
    Gibps_Scalar,
    GroupType,
    H,
    HZ,
    Hz,
    Hz_Scalar,
    InterfaceType,
    KB,
    KBPS,
    KHZ,
    KIB,
    KIBPS,
    Kbps,
    Kbps_Scalar,
    KiB,
    KiB_Scalar,
    Kibps,
    Kibps_Scalar,
    M,
    MB,
    MBPS,
    MB_Scalar,
    MHZ,
    MHz,
    MHz_Scalar,
    MIB,
    MIBPS,
    MS,
    Mbps,
    Mbps_Scalar,
    MiB,
    MiB_Scalar,
    Mibps,
    Mibps_Scalar,
    NS,
    Namespace,
    NodeType,
    PolicyType,
    Property,
    REQUIRED,
    MISSING,
    RelationshipType,
    Requirement,
    S,
    Size,
    T,
    TB,
    TBPS,
    TB_Scalar,
    TIB,
    TIBPS,
    Tbps,
    Tbps_Scalar,
    TiB,
    TiB_Scalar,
    Tibps,
    Tibps_Scalar,
    Time,
    ToscaDataType,
    ToscaInputs,
    ToscaOutputs,
    US,
    b,
    bps,
    bps_Scalar,
    d,
    d_Scalar,
    equal,
    field,
    gb,
    gbps,
    ghz,
    gib,
    gibps,
    greater_or_equal,
    greater_than,
    h,
    h_Scalar,
    hz,
    in_range,
    kB,
    kB_Scalar,
    kHz,
    kHz_Scalar,
    kb,
    kbps,
    khz,
    kib,
    kibps,
    length,
    less_or_equal,
    less_than,
    loader,
    m,
    m_Scalar,
    max_length,
    mb,
    mbps,
    metadata_to_yaml,
    mhz,
    mib,
    mibps,
    min_length,
    ms,
    ms_Scalar,
    ns,
    ns_Scalar,
    operation,
    pattern,
    s,
    s_Scalar,
    tb,
    tbps,
    tib,
    tibps,
    tosca_timestamp,
    tosca_version,
    us,
    us_Scalar,
    valid_values,
)
import tosca
import unfurl.configurators.dns


class unfurl_datatypes_DNSRecord(DataType):
    _type_name = "unfurl.datatypes.DNSRecord"
    _type_metadata = {"additionalProperties": True}
    type: str
    value: Union[str, None] = None
    values: Union[List[Any], None] = None


class unfurl_capabilities_DNSZone(tosca.capabilities.Root):
    _type_name = "unfurl.capabilities.DNSZone"


class unfurl_relationships_DNSRecords(tosca.relationships.Root):
    _type_name = "unfurl.relationships.DNSRecords"
    records: Dict[str, "unfurl_datatypes_DNSRecord"]

    _valid_target_types = ["unfurl_capabilities_DNSZone"]


class unfurl_nodes_DNSZone(tosca.nodes.Root):
    _type_name = "unfurl.nodes.DNSZone"
    _type_metadata = {"title": "DNS Zone"}
    name: str = Property(title="Domain Name")
    """Top level part of the DNS name (e.g. example.com)"""

    provider: Dict[str, Any] = Property(metadata={"sensitive": True})
    """OctoDNS provider configuration"""

    records: Dict[str, "unfurl_datatypes_DNSRecord"] = Property(
        metadata={"computed": True}, factory=lambda: ({})
    )
    """DNS records to add to the zone"""

    exclusive: bool = False
    """Zone exclusively managed by this instance (removes unrecognized records)"""

    default_ttl: int = Property(title="Default TTL", default=300)
    testing: bool = Property(title="Testing", default=False)
    """Is this DNS zone being used for testing? (If set, Let's Encrypt staging will be used.)"""

    zone: Dict[str, Any] = Attribute(metadata={"internal": True})
    """The records found in the zone"""

    managed_records: Union[Dict[str, Any], None] = Attribute(
        title="Managed Records", default=None
    )
    """The records in the zone that are managed by this instance"""

    resolve: "unfurl_capabilities_DNSZone" = Capability(
        factory=unfurl_capabilities_DNSZone
    )

    parent_zone: Union["unfurl_capabilities_DNSZone", None] = Requirement(
        default=None, metadata={"visibility": "hidden"}
    )

    @operation(
        apply_to=[
            "Install.check",
            "Install.connect",
            "Standard.delete",
            "Standard.configure",
            "Mock.configure",
        ]
    )
    def default(self, **kw):
        return unfurl.configurators.dns.DNSConfigurator()


if __name__ == "__main__":
    tosca.dump_yaml(globals())

